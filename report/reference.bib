@article{compiler-for-hpc,
author = {Bacon, David F. and Graham, Susan L. and Sharp, Oliver J.},
title = {Compiler transformations for high-performance computing},
year = {1994},
issue_date = {Dec. 1994},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {26},
number = {4},
issn = {0360-0300},
url = {https://doi.org/10.1145/197405.197406},
doi = {10.1145/197405.197406},
abstract = {In the last three decades a large number of compiler transformations for optimizing programs have been implemented. Most optimizations for uniprocessors reduce the number of instructions executed by the program using transformations based on the analysis of scalar quantities and data-flow techniques. In contrast, optimizations for high-performance superscalar, vector, and parallel processors maximize parallelism and memory locality with transformations that rely on tracking the properties of arrays using loop dependence analysis.This survey is a comprehensive overview of the important high-level program restructuring techniques for imperative languages, such as C and Fortran. Transformations for both sequential and various types of parallel architectures are covered in depth. We describe the purpose of each transformation, explain how to determine if it is legal, and give an example of its application.Programmers wishing to enhance the performance of their code can use this survey to improve their understanding of the optimizations that compilers can perform, or as a reference for techniques to be applied manually. Students can obtain an overview of optimizing compiler technology. Compiler writers can use this survey as a reference for most of the important optimizations developed to date, and as bibliographic reference for the details of each optimization. Readers are expected to be familiar with modern computer architecture and basic program compilation techniques.},
journal = {ACM Comput. Surv.},
month = dec,
pages = {345–420},
numpages = {76},
keywords = {compilation, dependence analysis, locality, multiprocessors, optimization, parallelism, superscalar processors, vectorization}
}
@article{yang2012structure,
  title={Structure and overlaps of communities in networks},
  author={Yang, Jaewon and Leskovec, Jure},
  journal={arXiv preprint arXiv:1205.6228},
  url={https://arxiv.org/abs/1205.6228},
  year={2012}
}
@inproceedings{yang2012community,
  title={Community-affiliation graph model for overlapping network community detection},
  author={Yang, Jaewon and Leskovec, Jure},
  booktitle={2012 IEEE 12th international conference on data mining},
  pages={1170--1175},
  year={2012},
  url={https://ieeexplore.ieee.org/abstract/document/6413734/},
  organization={IEEE}
}
@software{linux-perf,
    title={Perf: Performance Analysis Tools for Linux},
    url={https://manpages.debian.org/trixie/linux-perf/perf.1.en.html},
}
@inproceedings{p2go,
author = {Wintermeyer, Patrick and Apostolaki, Maria and Dietm\"{u}ller, Alexander and Vanbever, Laurent},
title = {P2GO: P4 Profile-Guided Optimizations},
year = {2020},
isbn = {9781450381451},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3422604.3425941},
doi = {10.1145/3422604.3425941},
abstract = {Programmable devices allow the operator to specify the data-plane behavior of a network device in a high-level language such as P4. The compiler then maps the P4 program to the hardware after applying a set of optimizations to minimize resource utilization. Yet, the lack of context restricts the compiler to conservatively account for all possible inputs -- including unrealistic or infrequent ones -- leading to sub-optimal use of the resources or even compilation failures. To address this inefficiency, we propose that the compiler leverages insights from actual traffic traces, effectively unlocking a broader spectrum of possible optimizations. We present a system working alongside the compiler that uses traffic-awareness to reduce the allocated resources of a P4 program by: (i) removing dependencies that do not manifest; (ii) adjusting table and register sizes to reduce the pipeline length; and (iii) offloading parts of the program that are rarely used to the controller. Our prototype implementation on the Tofino switch automatically profiles the P4 program, detects opportunities and performs optimizations to improve the pipeline efficiency. Our work showcases the potential benefit of applying profiling techniques used to compile general-purpose languages to compiling P4 programs.},
booktitle = {Proceedings of the 19th ACM Workshop on Hot Topics in Networks},
pages = {146–152},
numpages = {7},
keywords = {resource allocation, programmable networks, programmable data plane, profile-guided, p4, optimization, compilation},
location = {Virtual Event, USA},
series = {HotNets '20}
}
@book{embedded-hps,
title = {Embedded Systems: in High Performance Systems, Applications and Projectsin High Performance Systems, Applications and Projects},
ISBN = {978-953-51-0350-9},
url = {https://doi.org/10.5772/2684},
DOI = {10.5772/2684},
publisher = {IntechOpen},
year = {2012},
month = {Mar},
address = {London},
author = {Kiyofumi Tanaka},
}
@article{openmp,
title = {Running OpenMP applications efficiently on an everything-shared SDSM},
journal = {Journal of Parallel and Distributed Computing},
volume = {66},
number = {5},
pages = {647-658},
year = {2006},
note = {IPDPS '04 Special Issue},
issn = {0743-7315},
doi = {https://doi.org/10.1016/j.jpdc.2005.06.018},
url = {https://www.sciencedirect.com/science/article/pii/S0743731505001668},
author = {J.J. Costa and T. Cortes and X. Martorell and E. Ayguade and J. Labarta},
keywords = {OpenMP, Software distributed shared memory, Scalability, Adaptability, Cooperation},
abstract = {Traditional software distributed shared memory (SDSM) systems modify the semantics of a real hardware shared memory system by relaxing the coherence semantic and by limiting the memory regions that are actually shared. These semantic modifications are done to improve performance of the applications using it. In this paper, we will show that a SDSM system that behaves like a real shared memory system (without the afore-mentioned relaxations) can also be used to execute OpenMP applications and achieve similar speedups as the ones obtained by traditional SDSM systems. This performance can be achieved by encouraging the cooperation between the SDSM and the OpenMP runtime instead of relaxing the semantics of the shared memory. In addition, techniques like boundaries alignment and page presend are demonstrated as very useful to overcome the limitations of the current SDSM systems.}
}
@software{snap,
    title = {SNAP: Stanford Network Analysis Platform},
    author={Jure Leskovec},
    year = {2009},
    url={http://snap.stanford.edu/snap/download.html},
}
@software{pthread,
    title={POSIX Threads},
    url={https://www.man7.org/linux/man-pages/man7/pthreads.7.html},
}
@article{doi:10.1086/228631,
author = {Bonacich, Phillip},
title = {Power and Centrality: A Family of Measures},
journal = {American Journal of Sociology},
volume = {92},
number = {5},
pages = {1170-1182},
year = {1987},
doi = {10.1086/228631},
URL = {https://doi.org/10.1086/228631},
eprint = {https://doi.org/10.1086/228631},
abstract = { Although network centrality is generally assumed to produce power, recent research shows that this is not the case in exchange networks. This paper proposes a generalization of the concept of centrality that accounts for both the usual positive relationship between power and centrality and Cook et al.'s recent exceptional results. }
}
@article{girvan2002community,
  title={Community structure in social and biological networks},
  author={Girvan, Michelle and Newman, Mark EJ},
  journal={Proceedings of the national academy of sciences},
  volume={99},
  number={12},
  pages={7821--7826},
  year={2002},
  url={https://www.pnas.org/cgi/doi/10.1073/pnas.122653799},
  publisher={The National Academy of Sciences}
}
@article{freeman1977graph,
  title={Graph theory and network analysis in the social sciences},
  author={Freeman, LC},
  journal={Sociometry},
  volume={40},
  number={1},
  pages={35--41},
  year={1977}
}
@inproceedings{gemsec,    
  title={GEMSEC: Graph Embedding with Self Clustering},    
  author={Rozemberczki, Benedek and Davies, Ryan and Sarkar, Rik and Sutton, Charles},    
  booktitle={Proceedings of the 2019 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining 2019},    
  pages={65-72},    
  year={2019},    
  organization={ACM}    
}
@article{egonetwork,
  author       = {Julian J. McAuley and
                  Jure Leskovec},
  title        = {Discovering Social Circles in Ego Networks},
  journal      = {CoRR},
  volume       = {abs/1210.8182},
  year         = {2012},
  url          = {http://arxiv.org/abs/1210.8182},
  eprinttype    = {arXiv},
  eprint       = {1210.8182},
  timestamp    = {Mon, 13 Aug 2018 16:47:08 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-1210-8182.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@book{osbook,
  author =       {Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau},
  title =        {Operating Systems: Three Easy Pieces},
  publisher =    {Arpaci-Dusseau Books},
  month =        August,
  year =         {2018},
  url = {http://pages.cs.wisc.edu/~remzi/OSTEP/},
  edition =      {1.00},
}

 
